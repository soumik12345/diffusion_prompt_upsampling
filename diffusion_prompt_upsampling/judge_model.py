import os
from typing import Dict, Optional

import instructor
import weave
from openai import OpenAI
from pydantic import BaseModel


class Judgement(BaseModel):
    think_out_loud: str
    score: float
    judgement: str
    aesthetic_score: float


class OpenAIJudgeModel(weave.Model):
    openai_model: str
    max_retries: int
    seed: int
    _openai_client: Optional[instructor.Instructor] = None

    def __init__(
        self, openai_model: str = "gpt-4-turbo", max_retries: int = 5, seed: int = 42
    ):
        super().__init__(openai_model=openai_model, max_retries=max_retries, seed=seed)
        self._openai_client = instructor.from_openai(
            OpenAI(api_key=os.environ["OPENAI_API_KEY"])
        )

    @weave.op()
    def predict(self, base_prompt: str, generated_image: str) -> Dict:
        return self._openai_client.chat.completions.create(
            model=self.openai_model,
            response_model=Judgement,
            max_retries=self.max_retries,
            seed=self.seed,
            messages=[
                {
                    "role": "system",
                    "content": """
You are responsible for judging the faithfulness of images generated by a computer program to the
base prompt used to generate them and the overall aesthetics of the image. You will be presented
with an image and given the base prompt that was used to produce the image. The base prompts you
are judging are designed to stress-test image generation programs, and may include things such as:
1. Scrambled or mis-spelled words (the image generator should an image associated with
    the probably meaning).
2. Color assignment (the image generator should apply the correct color to the correct object).
3. Color assignment (the image generator should apply the correct color to the correct object).
4. Abnormal associations, for example 'elephant under a sea', where the image should depict
    what is requested.
5. Descriptions of objects, the image generator should draw the most commonly associated object.
6. Rare single words, where the image generator should create an image somewhat associable with
    the specified image.
7. Images with text in them, where the image generator should create an image with the specified
    text in it. You need to make a decision as to whether or not the image is correct, given the
    base prompt.

You will first think out loud about your eventual judgement, enumerating reasons why the image
does or does not match the given base prompt and the overall aesthetics of the image (such as
how vibrant the color palette is, how visually pleasing the image looks, and how much depth and
details the image shows). After thinking out loud, you should assign a score between 0 and 1
depending on how much you think the image is faithful to the base prompt. Next, you should output
either 'correct' or 'incorrect' depending on whether you think the image is faithful to the base
prompt. Finally, you will also assign an aesthetic score between 0 and 1 depending on how
aesthetically pleasing you find the image.

A few rules:
1. The score should be used to indicate how close the image is to the base prompt in terms of objects,
    color or count; with 0 being very far and 1 being very close.
2. Ignore other objects in the image that are not explicitly mentionedby the base prompt; it is fine for
    these to be shown.
3. Ignore other objects in the image that are not explicitly mentionedby the base prompt; it is fine for
    these to be shown.
4. 'incorrect' should be reserved for instances where a specific aspect of the base prompt is not followed
    correctly, such as a wrong object, color or count and the score should be less than or equal to 0.5.
5. The aesthetic score should be used to indicate how visually appealing you find the image, with 0 being
    close to dull, monochrome, and gray with the image lacking any depth, and 1 being very visually 
    appealing with a vibrant color palette and the image showing good depth and detail.
""",
                },
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": f"The base prompt is '{base_prompt}'"},
                        {"type": "image_url", "image_url": {"url": generated_image}},
                    ],
                },
            ],
        )

    @weave.op()
    def score(self, base_prompt: str, model_output: Dict) -> Dict:
        judgement: Judgement = self.predict(
            base_prompt=base_prompt, generated_image=model_output
        )
        return {
            "correctness": judgement.judgement,
            "score": judgement.score,
            "aesthetic_score": judgement.aesthetic_score,
        }
