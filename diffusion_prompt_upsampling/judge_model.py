from typing import Dict

import dspy
import weave
from pydantic import BaseModel, Field

from .dspy_multi_modal import DSPyOpenAIMultiModalLM


JUDGE_SYSTEM_PROMPT = """
You are responsible for judging the faithfulness of images generated by a computer program to the
base prompt used to generate them. You will be presented with an image and given the base prompt
that was used to produce the image. The base prompts you are judging are designed to stress-test
image generation programs, and may include things such as:
1. Scrambled or mis-spelled words (the image generator should an image associated with
    the probably meaning).
2. Color assignment (the image generator should apply the correct color to the correct object).
3. Color assignment (the image generator should apply the correct color to the correct object).
4. Abnormal associations, for example 'elephant under a sea', where the image should depict
    what is requested.
5. Descriptions of objects, the image generator should draw the most commonly associated object.
6. Rare single words, where the image generator should create an image somewhat associable with
    the specified image.
7. Images with text in them, where the image generator should create an image with the specified
    text in it. You need to make a decision as to whether or not the image is correct, given the
    base prompt.

You will first think out loud about your eventual judgement, enumerating reasons why the image
does or does not match the given base prompt. After thinking out loud, you should assign a score
between 0 and 1 depending on how much you think the image is faithful to the base prompt. Next,
you should output either 'correct' or 'incorrect' depending on whether you think the image is
faithful to the base prompt.

A few rules:
1. The score should be used to indicate how close the image is to the base prompt in terms of objects,
    color or count; with 0 being very far and 1 being very close.
2. If other objects are present in the image that are not explicitly mentioned by the base prompt,
    assign a higher score.
3. If the objects being displayed is deformed, assign a lower score. Assign a higher score, if the objects
    are displayed in a more detailed manner.
4. 'incorrect' should be reserved for instances where a specific aspect of the base prompt is not followed
    correctly, such as a wrong object, color or count and the score should be less than or equal to 0.5.
"""


class JudgeInput(BaseModel):
    base_prompt: str = Field(description="The base prompt used to generate the image")
    generated_image: str = Field(description="The generated image")


class JudgeMent(BaseModel):
    think_out_loud: str = Field(
        description="Think out loud about your eventual judgement"
    )
    score: float = Field(description="A score between 0 and 1")
    judgement: str = Field(description="Output either 'correct' or 'incorrect'")


class JudgeSignature(dspy.Signature):
    input: JudgeInput = dspy.InputField()
    output: JudgeMent = dspy.OutputField()


class MultiModalJudgeModule(dspy.Module):

    def __init__(self):
        self.prog = dspy.TypedPredictor(JudgeSignature)

    @weave.op()
    def forward(self, base_prompt: str, generated_image: str) -> dict:
        return self.prog(
            input=JudgeInput(base_prompt=base_prompt, generated_image=generated_image)
        ).output


class OpenAIJudgeModel(weave.Model):
    openai_model: str
    seed: int
    _judgement_llm: dspy.Module
    _judgement_module: MultiModalJudgeModule

    def __init__(self, openai_model: str = "gpt-4-turbo", seed: int = 42):
        super().__init__(openai_model=openai_model, seed=seed)
        self._judgement_llm = DSPyOpenAIMultiModalLM(
            model="gpt-4o", system_prompt=JUDGE_SYSTEM_PROMPT, seed=self.seed
        )
        self._judgement_module = MultiModalJudgeModule()

    @weave.op()
    def predict(self, base_prompt: str, generated_image: str) -> JudgeMent:
        with dspy.context(lm=self._judgement_llm):
            judgement = self._judgement_module(base_prompt, generated_image)
        return judgement

    @weave.op()
    def score(self, base_prompt: str, model_output: Dict) -> Dict:
        judgement: JudgeMent = self.predict(
            base_prompt=base_prompt, generated_image=model_output["image"]
        )
        return {
            "score": judgement.score,
            "is_image_correct": judgement.judgement == "correct",
        }
